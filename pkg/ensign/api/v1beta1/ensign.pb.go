// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/v1beta1/ensign.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Nack_Code int32

const (
	Nack_UNKNOWN Nack_Code = 0
	// Server-side NACK codes.
	Nack_MAX_EVENT_SIZE_EXCEEDED Nack_Code = 1
	Nack_TOPIC_UKNOWN            Nack_Code = 2
	Nack_TOPIC_ARCHVIVED         Nack_Code = 3
	Nack_TOPIC_DELETED           Nack_Code = 4
	Nack_PERMISSION_DENIED       Nack_Code = 5
	Nack_CONSENSUS_FAILURE       Nack_Code = 6
	Nack_SHARDING_FAILURE        Nack_Code = 7
	Nack_REDIRECT                Nack_Code = 8
	Nack_INTERNAL                Nack_Code = 9
	// Client-side NACK codes
	Nack_UNPROCESSED          Nack_Code = 100
	Nack_TIMEOUT              Nack_Code = 101
	Nack_UNHANDLED_MIMETYPE   Nack_Code = 102
	Nack_UNKNOWN_TYPE         Nack_Code = 103
	Nack_DELIVER_AGAIN_ANY    Nack_Code = 104
	Nack_DELIVER_AGAIN_NOT_ME Nack_Code = 105
)

// Enum value maps for Nack_Code.
var (
	Nack_Code_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "MAX_EVENT_SIZE_EXCEEDED",
		2:   "TOPIC_UKNOWN",
		3:   "TOPIC_ARCHVIVED",
		4:   "TOPIC_DELETED",
		5:   "PERMISSION_DENIED",
		6:   "CONSENSUS_FAILURE",
		7:   "SHARDING_FAILURE",
		8:   "REDIRECT",
		9:   "INTERNAL",
		100: "UNPROCESSED",
		101: "TIMEOUT",
		102: "UNHANDLED_MIMETYPE",
		103: "UNKNOWN_TYPE",
		104: "DELIVER_AGAIN_ANY",
		105: "DELIVER_AGAIN_NOT_ME",
	}
	Nack_Code_value = map[string]int32{
		"UNKNOWN":                 0,
		"MAX_EVENT_SIZE_EXCEEDED": 1,
		"TOPIC_UKNOWN":            2,
		"TOPIC_ARCHVIVED":         3,
		"TOPIC_DELETED":           4,
		"PERMISSION_DENIED":       5,
		"CONSENSUS_FAILURE":       6,
		"SHARDING_FAILURE":        7,
		"REDIRECT":                8,
		"INTERNAL":                9,
		"UNPROCESSED":             100,
		"TIMEOUT":                 101,
		"UNHANDLED_MIMETYPE":      102,
		"UNKNOWN_TYPE":            103,
		"DELIVER_AGAIN_ANY":       104,
		"DELIVER_AGAIN_NOT_ME":    105,
	}
)

func (x Nack_Code) Enum() *Nack_Code {
	p := new(Nack_Code)
	*p = x
	return p
}

func (x Nack_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nack_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1beta1_ensign_proto_enumTypes[0].Descriptor()
}

func (Nack_Code) Type() protoreflect.EnumType {
	return &file_api_v1beta1_ensign_proto_enumTypes[0]
}

func (x Nack_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nack_Code.Descriptor instead.
func (Nack_Code) EnumDescriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{5, 0}
}

type ServiceState_Status int32

const (
	ServiceState_UNKNOWN     ServiceState_Status = 0
	ServiceState_HEALTHY     ServiceState_Status = 1
	ServiceState_UNHEALTHY   ServiceState_Status = 2
	ServiceState_DANGER      ServiceState_Status = 3
	ServiceState_OFFLINE     ServiceState_Status = 4
	ServiceState_MAINTENANCE ServiceState_Status = 5
)

// Enum value maps for ServiceState_Status.
var (
	ServiceState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "DANGER",
		4: "OFFLINE",
		5: "MAINTENANCE",
	}
	ServiceState_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"HEALTHY":     1,
		"UNHEALTHY":   2,
		"DANGER":      3,
		"OFFLINE":     4,
		"MAINTENANCE": 5,
	}
)

func (x ServiceState_Status) Enum() *ServiceState_Status {
	p := new(ServiceState_Status)
	*p = x
	return p
}

func (x ServiceState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1beta1_ensign_proto_enumTypes[1].Descriptor()
}

func (ServiceState_Status) Type() protoreflect.EnumType {
	return &file_api_v1beta1_ensign_proto_enumTypes[1]
}

func (x ServiceState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState_Status.Descriptor instead.
func (ServiceState_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{13, 0}
}

// PublisherRequest messages are sent from the publisher to the server. Generally they
// are events that need to be published but the first message must be a stream
// initialization message to ensure that the publisher is authenticated and can identify
// itself. This message can be extended to allow for other interactions between the
// publisher and the server including topic queries, redirects, etc.
type PublisherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*PublisherRequest_Event
	//	*PublisherRequest_OpenStream
	Embed isPublisherRequest_Embed `protobuf_oneof:"embed"`
}

func (x *PublisherRequest) Reset() {
	*x = PublisherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherRequest) ProtoMessage() {}

func (x *PublisherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherRequest.ProtoReflect.Descriptor instead.
func (*PublisherRequest) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{0}
}

func (m *PublisherRequest) GetEmbed() isPublisherRequest_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *PublisherRequest) GetEvent() *EventWrapper {
	if x, ok := x.GetEmbed().(*PublisherRequest_Event); ok {
		return x.Event
	}
	return nil
}

func (x *PublisherRequest) GetOpenStream() *OpenStream {
	if x, ok := x.GetEmbed().(*PublisherRequest_OpenStream); ok {
		return x.OpenStream
	}
	return nil
}

type isPublisherRequest_Embed interface {
	isPublisherRequest_Embed()
}

type PublisherRequest_Event struct {
	Event *EventWrapper `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type PublisherRequest_OpenStream struct {
	OpenStream *OpenStream `protobuf:"bytes,2,opt,name=open_stream,json=openStream,proto3,oneof"`
}

func (*PublisherRequest_Event) isPublisherRequest_Embed() {}

func (*PublisherRequest_OpenStream) isPublisherRequest_Embed() {}

// PublisherReply messages are sent back to publishers from the server. Generally they
// are responses to receiving events (e.g. ack and nack) but the last message contains
// information about the performance of the publisher and the topic itself.
// This message can be extended to allow more general interactions between the publisher
// and the server including redirects, topic queries, etc.
type PublisherReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*PublisherReply_Ack
	//	*PublisherReply_Nack
	//	*PublisherReply_Ready
	//	*PublisherReply_CloseStream
	Embed isPublisherReply_Embed `protobuf_oneof:"embed"`
}

func (x *PublisherReply) Reset() {
	*x = PublisherReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherReply) ProtoMessage() {}

func (x *PublisherReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherReply.ProtoReflect.Descriptor instead.
func (*PublisherReply) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{1}
}

func (m *PublisherReply) GetEmbed() isPublisherReply_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *PublisherReply) GetAck() *Ack {
	if x, ok := x.GetEmbed().(*PublisherReply_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *PublisherReply) GetNack() *Nack {
	if x, ok := x.GetEmbed().(*PublisherReply_Nack); ok {
		return x.Nack
	}
	return nil
}

func (x *PublisherReply) GetReady() *StreamReady {
	if x, ok := x.GetEmbed().(*PublisherReply_Ready); ok {
		return x.Ready
	}
	return nil
}

func (x *PublisherReply) GetCloseStream() *CloseStream {
	if x, ok := x.GetEmbed().(*PublisherReply_CloseStream); ok {
		return x.CloseStream
	}
	return nil
}

type isPublisherReply_Embed interface {
	isPublisherReply_Embed()
}

type PublisherReply_Ack struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type PublisherReply_Nack struct {
	Nack *Nack `protobuf:"bytes,2,opt,name=nack,proto3,oneof"`
}

type PublisherReply_Ready struct {
	Ready *StreamReady `protobuf:"bytes,3,opt,name=ready,proto3,oneof"`
}

type PublisherReply_CloseStream struct {
	CloseStream *CloseStream `protobuf:"bytes,4,opt,name=close_stream,json=closeStream,proto3,oneof"`
}

func (*PublisherReply_Ack) isPublisherReply_Embed() {}

func (*PublisherReply_Nack) isPublisherReply_Embed() {}

func (*PublisherReply_Ready) isPublisherReply_Embed() {}

func (*PublisherReply_CloseStream) isPublisherReply_Embed() {}

// SubscribeRequest messages are sent to the server from subscribers. Generally they are
// responses to receiving events (e.g. ack and nack) but the first message must contain
// subscription information about the topic and the group so that Ensign can start
// sending the client events from the specified topic down the stream.
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*SubscribeRequest_Ack
	//	*SubscribeRequest_Nack
	//	*SubscribeRequest_Subscription
	Embed isSubscribeRequest_Embed `protobuf_oneof:"embed"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{2}
}

func (m *SubscribeRequest) GetEmbed() isSubscribeRequest_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *SubscribeRequest) GetAck() *Ack {
	if x, ok := x.GetEmbed().(*SubscribeRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *SubscribeRequest) GetNack() *Nack {
	if x, ok := x.GetEmbed().(*SubscribeRequest_Nack); ok {
		return x.Nack
	}
	return nil
}

func (x *SubscribeRequest) GetSubscription() *Subscription {
	if x, ok := x.GetEmbed().(*SubscribeRequest_Subscription); ok {
		return x.Subscription
	}
	return nil
}

type isSubscribeRequest_Embed interface {
	isSubscribeRequest_Embed()
}

type SubscribeRequest_Ack struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type SubscribeRequest_Nack struct {
	Nack *Nack `protobuf:"bytes,2,opt,name=nack,proto3,oneof"`
}

type SubscribeRequest_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"`
}

func (*SubscribeRequest_Ack) isSubscribeRequest_Embed() {}

func (*SubscribeRequest_Nack) isSubscribeRequest_Embed() {}

func (*SubscribeRequest_Subscription) isSubscribeRequest_Embed() {}

// SubscribeReply messages are sent to the subscriber from the server. In most cases
// this message is an event that matches the subscription information. However, this
// message can also contain control messages such as redirects, topic information, etc.
type SubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*SubscribeReply_Event
	//	*SubscribeReply_Ready
	//	*SubscribeReply_CloseStream
	Embed isSubscribeReply_Embed `protobuf_oneof:"embed"`
}

func (x *SubscribeReply) Reset() {
	*x = SubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReply) ProtoMessage() {}

func (x *SubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReply.ProtoReflect.Descriptor instead.
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{3}
}

func (m *SubscribeReply) GetEmbed() isSubscribeReply_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *SubscribeReply) GetEvent() *EventWrapper {
	if x, ok := x.GetEmbed().(*SubscribeReply_Event); ok {
		return x.Event
	}
	return nil
}

func (x *SubscribeReply) GetReady() *StreamReady {
	if x, ok := x.GetEmbed().(*SubscribeReply_Ready); ok {
		return x.Ready
	}
	return nil
}

func (x *SubscribeReply) GetCloseStream() *CloseStream {
	if x, ok := x.GetEmbed().(*SubscribeReply_CloseStream); ok {
		return x.CloseStream
	}
	return nil
}

type isSubscribeReply_Embed interface {
	isSubscribeReply_Embed()
}

type SubscribeReply_Event struct {
	Event *EventWrapper `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type SubscribeReply_Ready struct {
	Ready *StreamReady `protobuf:"bytes,2,opt,name=ready,proto3,oneof"`
}

type SubscribeReply_CloseStream struct {
	CloseStream *CloseStream `protobuf:"bytes,3,opt,name=close_stream,json=closeStream,proto3,oneof"`
}

func (*SubscribeReply_Event) isSubscribeReply_Embed() {}

func (*SubscribeReply_Ready) isSubscribeReply_Embed() {}

func (*SubscribeReply_CloseStream) isSubscribeReply_Embed() {}

// Ack represents the receipt and final handling of an event. This datatype should be
// small so that throughput is not affected and generally only contains the ID of the
// event being acknowledged. When Ensign commits an event to the log from the producer,
// the commit timestamp is returned to help determine event latency. When clients ack an
// event back to the Ensign server, they only need contain the id.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Committed *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{4}
}

func (x *Ack) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ack) GetCommitted() *timestamppb.Timestamp {
	if x != nil {
		return x.Committed
	}
	return nil
}

// Nack means that an event could not be handled or committed. This datatype should be
// small so that throughput is not affected and generally only conains the id of the
// event and the error code describing what went wrong. Longer error messages are
// optional and should only be used when something abnormal has occurred. The Ensign
// server will return a Nack if the event could not be appended to the log. Clients
// should return a Nack if the event couldn't be handled or processed so that Ensign
// ensures another client retrieves the event.
type Nack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code  Nack_Code `protobuf:"varint,2,opt,name=code,proto3,enum=ensign.v1beta1.Nack_Code" json:"code,omitempty"`
	Error string    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Nack) Reset() {
	*x = Nack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nack) ProtoMessage() {}

func (x *Nack) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nack.ProtoReflect.Descriptor instead.
func (*Nack) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{5}
}

func (x *Nack) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Nack) GetCode() Nack_Code {
	if x != nil {
		return x.Code
	}
	return Nack_UNKNOWN
}

func (x *Nack) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// OpenStream is the first message that should be sent in a Publish stream in order to
// identify and authenticate the publisher. Optionally, the publisher can specify the
// topics that they want to publish to in order to check that they are being sent to the
// correct node.
type OpenStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Topics   []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *OpenStream) Reset() {
	*x = OpenStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStream) ProtoMessage() {}

func (x *OpenStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStream.ProtoReflect.Descriptor instead.
func (*OpenStream) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{6}
}

func (x *OpenStream) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OpenStream) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

// CloseStream returns some basic stats and topic information to the publisher or
// subscriber when the stream is closed and provides feedback that the stream was closed
// successfully.
type CloseStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events    uint64 `protobuf:"varint,1,opt,name=events,proto3" json:"events,omitempty"`
	Topics    uint64 `protobuf:"varint,2,opt,name=topics,proto3" json:"topics,omitempty"`
	Consumers uint64 `protobuf:"varint,3,opt,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *CloseStream) Reset() {
	*x = CloseStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStream) ProtoMessage() {}

func (x *CloseStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStream.ProtoReflect.Descriptor instead.
func (*CloseStream) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{7}
}

func (x *CloseStream) GetEvents() uint64 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *CloseStream) GetTopics() uint64 {
	if x != nil {
		return x.Topics
	}
	return 0
}

func (x *CloseStream) GetConsumers() uint64 {
	if x != nil {
		return x.Consumers
	}
	return 0
}

// Sent in response to an OpenStream or Subscription message so that the client knows
// it can start sending or receiving events from the stream.
type StreamReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // repeated back to the client for sanity
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"` // the node that the stream is conneced to
	// Maps the topic name to the topic ID (ULID bytes) that are available on this node.
	// TODO: handle topic redirects to other nodes.
	Topics map[string][]byte `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamReady) Reset() {
	*x = StreamReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReady) ProtoMessage() {}

func (x *StreamReady) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReady.ProtoReflect.Descriptor instead.
func (*StreamReady) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{8}
}

func (x *StreamReady) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StreamReady) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *StreamReady) GetTopics() map[string][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

// Subscription is used to initialize a subscribe stream so that the Ensign node returns
// the correct events to the subscriber based on the query or the topics they request.
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string         `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Topics   []string       `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Query    string         `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Group    *ConsumerGroup `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{9}
}

func (x *Subscription) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Subscription) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Subscription) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Subscription) GetGroup() *ConsumerGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// InfoRequest allows the project info to be filtered by a list of specific topics.
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics [][]byte `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{10}
}

func (x *InfoRequest) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

// ProjectInfo describes overall project statistics for the project described in the
// authentication claims that the user connects with.
type ProjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Topics         uint64 `protobuf:"varint,2,opt,name=topics,proto3" json:"topics,omitempty"`
	ReadonlyTopics uint64 `protobuf:"varint,3,opt,name=readonly_topics,json=readonlyTopics,proto3" json:"readonly_topics,omitempty"`
	Events         uint64 `protobuf:"varint,4,opt,name=events,proto3" json:"events,omitempty"`
}

func (x *ProjectInfo) Reset() {
	*x = ProjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectInfo) ProtoMessage() {}

func (x *ProjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectInfo.ProtoReflect.Descriptor instead.
func (*ProjectInfo) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{11}
}

func (x *ProjectInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectInfo) GetTopics() uint64 {
	if x != nil {
		return x.Topics
	}
	return 0
}

func (x *ProjectInfo) GetReadonlyTopics() uint64 {
	if x != nil {
		return x.ReadonlyTopics
	}
	return 0
}

func (x *ProjectInfo) GetEvents() uint64 {
	if x != nil {
		return x.Events
	}
	return 0
}

// HealthCheck is used to query the service state of an Ensign node.
type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of failed health checks that proceeded the current check.
	Attempts uint32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// The timestamp of the last health check, successful or otherwise.
	LastCheckedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_checked_at,json=lastCheckedAt,proto3" json:"last_checked_at,omitempty"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{12}
}

func (x *HealthCheck) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *HealthCheck) GetLastCheckedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheckedAt
	}
	return nil
}

// ServiceState describes the health status of the Ensign node and can be used for
// heartbeats and monitoring.
type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current service status as defined by the recieving system. The system is obliged
	// to respond with the closest matching status in a best-effort fashion. Alerts will
	// be triggered on service status changes if the system does not respond and the
	// previous system state was not unknown.
	Status ServiceState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ensign.v1beta1.ServiceState_Status" json:"status,omitempty"`
	// The current version of the node running the Ensign service
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// How long the node has been up and running since it was last rebooted
	Uptime *durationpb.Duration `protobuf:"bytes,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Hint to the client when to check the health status again.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{13}
}

func (x *ServiceState) GetStatus() ServiceState_Status {
	if x != nil {
		return x.Status
	}
	return ServiceState_UNKNOWN
}

func (x *ServiceState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceState) GetUptime() *durationpb.Duration {
	if x != nil {
		return x.Uptime
	}
	return nil
}

func (x *ServiceState) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *ServiceState) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

// A basic request for paginated list queries.
type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize      uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{14}
}

func (x *PageInfo) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageInfo) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_api_v1beta1_ensign_proto protoreflect.FileDescriptor

var file_api_v1beta1_ensign_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x63, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x22, 0x4f, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x22, 0xa1, 0x03, 0x0a, 0x04, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xc3, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x55, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x56, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x4f, 0x50, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x48, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x64, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x4d, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x68, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x10, 0x69, 0x22, 0x41, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x25,
	0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x22, 0x4f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xe3, 0x05, 0x0a, 0x06, 0x45, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x20, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x18, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x1a, 0x1e, 0x2e, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x65,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a,
	0x1c, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1beta1_ensign_proto_rawDescOnce sync.Once
	file_api_v1beta1_ensign_proto_rawDescData = file_api_v1beta1_ensign_proto_rawDesc
)

func file_api_v1beta1_ensign_proto_rawDescGZIP() []byte {
	file_api_v1beta1_ensign_proto_rawDescOnce.Do(func() {
		file_api_v1beta1_ensign_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1beta1_ensign_proto_rawDescData)
	})
	return file_api_v1beta1_ensign_proto_rawDescData
}

var file_api_v1beta1_ensign_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1beta1_ensign_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_v1beta1_ensign_proto_goTypes = []interface{}{
	(Nack_Code)(0),                // 0: ensign.v1beta1.Nack.Code
	(ServiceState_Status)(0),      // 1: ensign.v1beta1.ServiceState.Status
	(*PublisherRequest)(nil),      // 2: ensign.v1beta1.PublisherRequest
	(*PublisherReply)(nil),        // 3: ensign.v1beta1.PublisherReply
	(*SubscribeRequest)(nil),      // 4: ensign.v1beta1.SubscribeRequest
	(*SubscribeReply)(nil),        // 5: ensign.v1beta1.SubscribeReply
	(*Ack)(nil),                   // 6: ensign.v1beta1.Ack
	(*Nack)(nil),                  // 7: ensign.v1beta1.Nack
	(*OpenStream)(nil),            // 8: ensign.v1beta1.OpenStream
	(*CloseStream)(nil),           // 9: ensign.v1beta1.CloseStream
	(*StreamReady)(nil),           // 10: ensign.v1beta1.StreamReady
	(*Subscription)(nil),          // 11: ensign.v1beta1.Subscription
	(*InfoRequest)(nil),           // 12: ensign.v1beta1.InfoRequest
	(*ProjectInfo)(nil),           // 13: ensign.v1beta1.ProjectInfo
	(*HealthCheck)(nil),           // 14: ensign.v1beta1.HealthCheck
	(*ServiceState)(nil),          // 15: ensign.v1beta1.ServiceState
	(*PageInfo)(nil),              // 16: ensign.v1beta1.PageInfo
	nil,                           // 17: ensign.v1beta1.StreamReady.TopicsEntry
	(*EventWrapper)(nil),          // 18: ensign.v1beta1.EventWrapper
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	(*ConsumerGroup)(nil),         // 20: ensign.v1beta1.ConsumerGroup
	(*durationpb.Duration)(nil),   // 21: google.protobuf.Duration
	(*Topic)(nil),                 // 22: ensign.v1beta1.Topic
	(*TopicMod)(nil),              // 23: ensign.v1beta1.TopicMod
	(*TopicName)(nil),             // 24: ensign.v1beta1.TopicName
	(*TopicsPage)(nil),            // 25: ensign.v1beta1.TopicsPage
	(*TopicTombstone)(nil),        // 26: ensign.v1beta1.TopicTombstone
	(*TopicNamesPage)(nil),        // 27: ensign.v1beta1.TopicNamesPage
	(*TopicExistsInfo)(nil),       // 28: ensign.v1beta1.TopicExistsInfo
}
var file_api_v1beta1_ensign_proto_depIdxs = []int32{
	18, // 0: ensign.v1beta1.PublisherRequest.event:type_name -> ensign.v1beta1.EventWrapper
	8,  // 1: ensign.v1beta1.PublisherRequest.open_stream:type_name -> ensign.v1beta1.OpenStream
	6,  // 2: ensign.v1beta1.PublisherReply.ack:type_name -> ensign.v1beta1.Ack
	7,  // 3: ensign.v1beta1.PublisherReply.nack:type_name -> ensign.v1beta1.Nack
	10, // 4: ensign.v1beta1.PublisherReply.ready:type_name -> ensign.v1beta1.StreamReady
	9,  // 5: ensign.v1beta1.PublisherReply.close_stream:type_name -> ensign.v1beta1.CloseStream
	6,  // 6: ensign.v1beta1.SubscribeRequest.ack:type_name -> ensign.v1beta1.Ack
	7,  // 7: ensign.v1beta1.SubscribeRequest.nack:type_name -> ensign.v1beta1.Nack
	11, // 8: ensign.v1beta1.SubscribeRequest.subscription:type_name -> ensign.v1beta1.Subscription
	18, // 9: ensign.v1beta1.SubscribeReply.event:type_name -> ensign.v1beta1.EventWrapper
	10, // 10: ensign.v1beta1.SubscribeReply.ready:type_name -> ensign.v1beta1.StreamReady
	9,  // 11: ensign.v1beta1.SubscribeReply.close_stream:type_name -> ensign.v1beta1.CloseStream
	19, // 12: ensign.v1beta1.Ack.committed:type_name -> google.protobuf.Timestamp
	0,  // 13: ensign.v1beta1.Nack.code:type_name -> ensign.v1beta1.Nack.Code
	17, // 14: ensign.v1beta1.StreamReady.topics:type_name -> ensign.v1beta1.StreamReady.TopicsEntry
	20, // 15: ensign.v1beta1.Subscription.group:type_name -> ensign.v1beta1.ConsumerGroup
	19, // 16: ensign.v1beta1.HealthCheck.last_checked_at:type_name -> google.protobuf.Timestamp
	1,  // 17: ensign.v1beta1.ServiceState.status:type_name -> ensign.v1beta1.ServiceState.Status
	21, // 18: ensign.v1beta1.ServiceState.uptime:type_name -> google.protobuf.Duration
	19, // 19: ensign.v1beta1.ServiceState.not_before:type_name -> google.protobuf.Timestamp
	19, // 20: ensign.v1beta1.ServiceState.not_after:type_name -> google.protobuf.Timestamp
	2,  // 21: ensign.v1beta1.Ensign.Publish:input_type -> ensign.v1beta1.PublisherRequest
	4,  // 22: ensign.v1beta1.Ensign.Subscribe:input_type -> ensign.v1beta1.SubscribeRequest
	16, // 23: ensign.v1beta1.Ensign.ListTopics:input_type -> ensign.v1beta1.PageInfo
	22, // 24: ensign.v1beta1.Ensign.CreateTopic:input_type -> ensign.v1beta1.Topic
	22, // 25: ensign.v1beta1.Ensign.RetrieveTopic:input_type -> ensign.v1beta1.Topic
	23, // 26: ensign.v1beta1.Ensign.DeleteTopic:input_type -> ensign.v1beta1.TopicMod
	16, // 27: ensign.v1beta1.Ensign.TopicNames:input_type -> ensign.v1beta1.PageInfo
	24, // 28: ensign.v1beta1.Ensign.TopicExists:input_type -> ensign.v1beta1.TopicName
	12, // 29: ensign.v1beta1.Ensign.Info:input_type -> ensign.v1beta1.InfoRequest
	14, // 30: ensign.v1beta1.Ensign.Status:input_type -> ensign.v1beta1.HealthCheck
	3,  // 31: ensign.v1beta1.Ensign.Publish:output_type -> ensign.v1beta1.PublisherReply
	5,  // 32: ensign.v1beta1.Ensign.Subscribe:output_type -> ensign.v1beta1.SubscribeReply
	25, // 33: ensign.v1beta1.Ensign.ListTopics:output_type -> ensign.v1beta1.TopicsPage
	22, // 34: ensign.v1beta1.Ensign.CreateTopic:output_type -> ensign.v1beta1.Topic
	22, // 35: ensign.v1beta1.Ensign.RetrieveTopic:output_type -> ensign.v1beta1.Topic
	26, // 36: ensign.v1beta1.Ensign.DeleteTopic:output_type -> ensign.v1beta1.TopicTombstone
	27, // 37: ensign.v1beta1.Ensign.TopicNames:output_type -> ensign.v1beta1.TopicNamesPage
	28, // 38: ensign.v1beta1.Ensign.TopicExists:output_type -> ensign.v1beta1.TopicExistsInfo
	13, // 39: ensign.v1beta1.Ensign.Info:output_type -> ensign.v1beta1.ProjectInfo
	15, // 40: ensign.v1beta1.Ensign.Status:output_type -> ensign.v1beta1.ServiceState
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_v1beta1_ensign_proto_init() }
func file_api_v1beta1_ensign_proto_init() {
	if File_api_v1beta1_ensign_proto != nil {
		return
	}
	file_api_v1beta1_event_proto_init()
	file_api_v1beta1_topic_proto_init()
	file_api_v1beta1_groups_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1beta1_ensign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1beta1_ensign_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PublisherRequest_Event)(nil),
		(*PublisherRequest_OpenStream)(nil),
	}
	file_api_v1beta1_ensign_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PublisherReply_Ack)(nil),
		(*PublisherReply_Nack)(nil),
		(*PublisherReply_Ready)(nil),
		(*PublisherReply_CloseStream)(nil),
	}
	file_api_v1beta1_ensign_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SubscribeRequest_Ack)(nil),
		(*SubscribeRequest_Nack)(nil),
		(*SubscribeRequest_Subscription)(nil),
	}
	file_api_v1beta1_ensign_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SubscribeReply_Event)(nil),
		(*SubscribeReply_Ready)(nil),
		(*SubscribeReply_CloseStream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1beta1_ensign_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1beta1_ensign_proto_goTypes,
		DependencyIndexes: file_api_v1beta1_ensign_proto_depIdxs,
		EnumInfos:         file_api_v1beta1_ensign_proto_enumTypes,
		MessageInfos:      file_api_v1beta1_ensign_proto_msgTypes,
	}.Build()
	File_api_v1beta1_ensign_proto = out.File
	file_api_v1beta1_ensign_proto_rawDesc = nil
	file_api_v1beta1_ensign_proto_goTypes = nil
	file_api_v1beta1_ensign_proto_depIdxs = nil
}
