// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/v1beta1/ensign.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceState_Status int32

const (
	ServiceState_UNKNOWN     ServiceState_Status = 0
	ServiceState_HEALTHY     ServiceState_Status = 1
	ServiceState_UNHEALTHY   ServiceState_Status = 2
	ServiceState_DANGER      ServiceState_Status = 3
	ServiceState_OFFLINE     ServiceState_Status = 4
	ServiceState_MAINTENANCE ServiceState_Status = 5
)

// Enum value maps for ServiceState_Status.
var (
	ServiceState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "DANGER",
		4: "OFFLINE",
		5: "MAINTENANCE",
	}
	ServiceState_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"HEALTHY":     1,
		"UNHEALTHY":   2,
		"DANGER":      3,
		"OFFLINE":     4,
		"MAINTENANCE": 5,
	}
)

func (x ServiceState_Status) Enum() *ServiceState_Status {
	p := new(ServiceState_Status)
	*p = x
	return p
}

func (x ServiceState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1beta1_ensign_proto_enumTypes[0].Descriptor()
}

func (ServiceState_Status) Type() protoreflect.EnumType {
	return &file_api_v1beta1_ensign_proto_enumTypes[0]
}

func (x ServiceState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState_Status.Descriptor instead.
func (ServiceState_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{7, 0}
}

// Publication messages are sent back to publishers from the server. Generally they are
// responses to receiving events (e.g. ack and nack) but the last message contains
// information about the performance of the publisher and the topic itself.
type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*Publication_Ack
	//	*Publication_Nack
	//	*Publication_CloseStream
	Embed isPublication_Embed `protobuf_oneof:"embed"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{0}
}

func (m *Publication) GetEmbed() isPublication_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *Publication) GetAck() *Ack {
	if x, ok := x.GetEmbed().(*Publication_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *Publication) GetNack() *Nack {
	if x, ok := x.GetEmbed().(*Publication_Nack); ok {
		return x.Nack
	}
	return nil
}

func (x *Publication) GetCloseStream() *CloseStream {
	if x, ok := x.GetEmbed().(*Publication_CloseStream); ok {
		return x.CloseStream
	}
	return nil
}

type isPublication_Embed interface {
	isPublication_Embed()
}

type Publication_Ack struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type Publication_Nack struct {
	Nack *Nack `protobuf:"bytes,2,opt,name=nack,proto3,oneof"`
}

type Publication_CloseStream struct {
	CloseStream *CloseStream `protobuf:"bytes,3,opt,name=close_stream,json=closeStream,proto3,oneof"`
}

func (*Publication_Ack) isPublication_Embed() {}

func (*Publication_Nack) isPublication_Embed() {}

func (*Publication_CloseStream) isPublication_Embed() {}

// Subscription messages are sent to the server from subscribers. Generally they are
// responses to receiving events (e.g. ack and nack) but the first message must contain
// subscription information about the topic and the group so that Ensign can start
// sending the client events from the specified topic down the stream.
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embed:
	//
	//	*Subscription_Ack
	//	*Subscription_Nack
	//	*Subscription_OpenStream
	Embed isSubscription_Embed `protobuf_oneof:"embed"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{1}
}

func (m *Subscription) GetEmbed() isSubscription_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

func (x *Subscription) GetAck() *Ack {
	if x, ok := x.GetEmbed().(*Subscription_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *Subscription) GetNack() *Nack {
	if x, ok := x.GetEmbed().(*Subscription_Nack); ok {
		return x.Nack
	}
	return nil
}

func (x *Subscription) GetOpenStream() *OpenStream {
	if x, ok := x.GetEmbed().(*Subscription_OpenStream); ok {
		return x.OpenStream
	}
	return nil
}

type isSubscription_Embed interface {
	isSubscription_Embed()
}

type Subscription_Ack struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type Subscription_Nack struct {
	Nack *Nack `protobuf:"bytes,2,opt,name=nack,proto3,oneof"`
}

type Subscription_OpenStream struct {
	OpenStream *OpenStream `protobuf:"bytes,3,opt,name=open_stream,json=openStream,proto3,oneof"`
}

func (*Subscription_Ack) isSubscription_Embed() {}

func (*Subscription_Nack) isSubscription_Embed() {}

func (*Subscription_OpenStream) isSubscription_Embed() {}

// Ack represents the receipt and final handling of an event. This datatype should be
// small so that throughput is not affected and generally only contains the ID of the
// event being acknowledged. When Ensign commits an event to the log from the producer,
// the commit timestamp is returned to help determine event latency. When clients ack an
// event back to the Ensign server, they only need contain the id.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Committed *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=committed,proto3" json:"committed,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ack) GetCommitted() *timestamppb.Timestamp {
	if x != nil {
		return x.Committed
	}
	return nil
}

// Nack means that an event could not be handled or committed. This datatype should be
// small so that throughput is not affected and generally only conains the id of the
// event and the error code describing what went wrong. Longer error messages are
// optional and should only be used when something abnormal has occurred. The Ensign
// server will return a Nack if the event could not be appended to the log. Clients
// should return a Nack if the event couldn't be handled or processed so that Ensign
// ensures another client retrieves the event.
type Nack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code  uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Nack) Reset() {
	*x = Nack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nack) ProtoMessage() {}

func (x *Nack) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nack.ProtoReflect.Descriptor instead.
func (*Nack) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{3}
}

func (x *Nack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Nack) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Nack) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// OpenStream is the first message that should be sent in a Subscribe stream as it
// defines what topic the client is subscribing to and how it will process the events.
type OpenStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerId string         `protobuf:"bytes,1,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
	Topics     []string       `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Group      *ConsumerGroup `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *OpenStream) Reset() {
	*x = OpenStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStream) ProtoMessage() {}

func (x *OpenStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStream.ProtoReflect.Descriptor instead.
func (*OpenStream) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{4}
}

func (x *OpenStream) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

func (x *OpenStream) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *OpenStream) GetGroup() *ConsumerGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// CloseStream returns some basic stats and topic information to the publisher when the
// stream is closed and provides feedback that the stream was closed successfully.
type CloseStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events      uint64 `protobuf:"varint,1,opt,name=events,proto3" json:"events,omitempty"`
	TopicOffset uint64 `protobuf:"varint,2,opt,name=topic_offset,json=topicOffset,proto3" json:"topic_offset,omitempty"`
	Consumers   uint64 `protobuf:"varint,3,opt,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *CloseStream) Reset() {
	*x = CloseStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStream) ProtoMessage() {}

func (x *CloseStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStream.ProtoReflect.Descriptor instead.
func (*CloseStream) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{5}
}

func (x *CloseStream) GetEvents() uint64 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *CloseStream) GetTopicOffset() uint64 {
	if x != nil {
		return x.TopicOffset
	}
	return 0
}

func (x *CloseStream) GetConsumers() uint64 {
	if x != nil {
		return x.Consumers
	}
	return 0
}

type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of failed health checks that proceeded the current check.
	Attempts uint32 `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// The timestamp of the last health check, successful or otherwise.
	LastCheckedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_checked_at,json=lastCheckedAt,proto3" json:"last_checked_at,omitempty"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{6}
}

func (x *HealthCheck) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *HealthCheck) GetLastCheckedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheckedAt
	}
	return nil
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current service status as defined by the recieving system. The system is obliged
	// to respond with the closest matching status in a best-effort fashion. Alerts will
	// be triggered on service status changes if the system does not respond and the
	// previous system state was not unknown.
	Status ServiceState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ensign.v1beta1.ServiceState_Status" json:"status,omitempty"`
	// The current version of the node running the Ensign service
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// How long the node has been up and running since it was last rebooted
	Uptime *durationpb.Duration `protobuf:"bytes,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Hint to the client when to check the health status again.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceState) GetStatus() ServiceState_Status {
	if x != nil {
		return x.Status
	}
	return ServiceState_UNKNOWN
}

func (x *ServiceState) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceState) GetUptime() *durationpb.Duration {
	if x != nil {
		return x.Uptime
	}
	return nil
}

func (x *ServiceState) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *ServiceState) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

// A basic request for paginated list queries.
type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize      uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1beta1_ensign_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1beta1_ensign_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_api_v1beta1_ensign_proto_rawDescGZIP(), []int{8}
}

func (x *PageInfo) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageInfo) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_api_v1beta1_ensign_proto protoreflect.FileDescriptor

var file_api_v1beta1_ensign_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b,
	0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4e, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x04, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x66, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x0b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x22, 0x4f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x84, 0x05, 0x0a, 0x06, 0x45, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x15,
	0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1c, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x44, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18,
	0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x15, 0x2e, 0x65,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x15, 0x2e,
	0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x1a,
	0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x18, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x65, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a,
	0x1c, 0x2e, 0x65, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1beta1_ensign_proto_rawDescOnce sync.Once
	file_api_v1beta1_ensign_proto_rawDescData = file_api_v1beta1_ensign_proto_rawDesc
)

func file_api_v1beta1_ensign_proto_rawDescGZIP() []byte {
	file_api_v1beta1_ensign_proto_rawDescOnce.Do(func() {
		file_api_v1beta1_ensign_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1beta1_ensign_proto_rawDescData)
	})
	return file_api_v1beta1_ensign_proto_rawDescData
}

var file_api_v1beta1_ensign_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v1beta1_ensign_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_v1beta1_ensign_proto_goTypes = []interface{}{
	(ServiceState_Status)(0),      // 0: ensign.v1beta1.ServiceState.Status
	(*Publication)(nil),           // 1: ensign.v1beta1.Publication
	(*Subscription)(nil),          // 2: ensign.v1beta1.Subscription
	(*Ack)(nil),                   // 3: ensign.v1beta1.Ack
	(*Nack)(nil),                  // 4: ensign.v1beta1.Nack
	(*OpenStream)(nil),            // 5: ensign.v1beta1.OpenStream
	(*CloseStream)(nil),           // 6: ensign.v1beta1.CloseStream
	(*HealthCheck)(nil),           // 7: ensign.v1beta1.HealthCheck
	(*ServiceState)(nil),          // 8: ensign.v1beta1.ServiceState
	(*PageInfo)(nil),              // 9: ensign.v1beta1.PageInfo
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*ConsumerGroup)(nil),         // 11: ensign.v1beta1.ConsumerGroup
	(*durationpb.Duration)(nil),   // 12: google.protobuf.Duration
	(*Event)(nil),                 // 13: ensign.v1beta1.Event
	(*Topic)(nil),                 // 14: ensign.v1beta1.Topic
	(*TopicMod)(nil),              // 15: ensign.v1beta1.TopicMod
	(*TopicName)(nil),             // 16: ensign.v1beta1.TopicName
	(*TopicsPage)(nil),            // 17: ensign.v1beta1.TopicsPage
	(*TopicTombstone)(nil),        // 18: ensign.v1beta1.TopicTombstone
	(*TopicNamesPage)(nil),        // 19: ensign.v1beta1.TopicNamesPage
	(*TopicExistsInfo)(nil),       // 20: ensign.v1beta1.TopicExistsInfo
}
var file_api_v1beta1_ensign_proto_depIdxs = []int32{
	3,  // 0: ensign.v1beta1.Publication.ack:type_name -> ensign.v1beta1.Ack
	4,  // 1: ensign.v1beta1.Publication.nack:type_name -> ensign.v1beta1.Nack
	6,  // 2: ensign.v1beta1.Publication.close_stream:type_name -> ensign.v1beta1.CloseStream
	3,  // 3: ensign.v1beta1.Subscription.ack:type_name -> ensign.v1beta1.Ack
	4,  // 4: ensign.v1beta1.Subscription.nack:type_name -> ensign.v1beta1.Nack
	5,  // 5: ensign.v1beta1.Subscription.open_stream:type_name -> ensign.v1beta1.OpenStream
	10, // 6: ensign.v1beta1.Ack.committed:type_name -> google.protobuf.Timestamp
	11, // 7: ensign.v1beta1.OpenStream.group:type_name -> ensign.v1beta1.ConsumerGroup
	10, // 8: ensign.v1beta1.HealthCheck.last_checked_at:type_name -> google.protobuf.Timestamp
	0,  // 9: ensign.v1beta1.ServiceState.status:type_name -> ensign.v1beta1.ServiceState.Status
	12, // 10: ensign.v1beta1.ServiceState.uptime:type_name -> google.protobuf.Duration
	10, // 11: ensign.v1beta1.ServiceState.not_before:type_name -> google.protobuf.Timestamp
	10, // 12: ensign.v1beta1.ServiceState.not_after:type_name -> google.protobuf.Timestamp
	13, // 13: ensign.v1beta1.Ensign.Publish:input_type -> ensign.v1beta1.Event
	2,  // 14: ensign.v1beta1.Ensign.Subscribe:input_type -> ensign.v1beta1.Subscription
	9,  // 15: ensign.v1beta1.Ensign.ListTopics:input_type -> ensign.v1beta1.PageInfo
	14, // 16: ensign.v1beta1.Ensign.CreateTopic:input_type -> ensign.v1beta1.Topic
	14, // 17: ensign.v1beta1.Ensign.RetrieveTopic:input_type -> ensign.v1beta1.Topic
	15, // 18: ensign.v1beta1.Ensign.DeleteTopic:input_type -> ensign.v1beta1.TopicMod
	9,  // 19: ensign.v1beta1.Ensign.TopicNames:input_type -> ensign.v1beta1.PageInfo
	16, // 20: ensign.v1beta1.Ensign.TopicExists:input_type -> ensign.v1beta1.TopicName
	7,  // 21: ensign.v1beta1.Ensign.Status:input_type -> ensign.v1beta1.HealthCheck
	1,  // 22: ensign.v1beta1.Ensign.Publish:output_type -> ensign.v1beta1.Publication
	13, // 23: ensign.v1beta1.Ensign.Subscribe:output_type -> ensign.v1beta1.Event
	17, // 24: ensign.v1beta1.Ensign.ListTopics:output_type -> ensign.v1beta1.TopicsPage
	14, // 25: ensign.v1beta1.Ensign.CreateTopic:output_type -> ensign.v1beta1.Topic
	14, // 26: ensign.v1beta1.Ensign.RetrieveTopic:output_type -> ensign.v1beta1.Topic
	18, // 27: ensign.v1beta1.Ensign.DeleteTopic:output_type -> ensign.v1beta1.TopicTombstone
	19, // 28: ensign.v1beta1.Ensign.TopicNames:output_type -> ensign.v1beta1.TopicNamesPage
	20, // 29: ensign.v1beta1.Ensign.TopicExists:output_type -> ensign.v1beta1.TopicExistsInfo
	8,  // 30: ensign.v1beta1.Ensign.Status:output_type -> ensign.v1beta1.ServiceState
	22, // [22:31] is the sub-list for method output_type
	13, // [13:22] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_v1beta1_ensign_proto_init() }
func file_api_v1beta1_ensign_proto_init() {
	if File_api_v1beta1_ensign_proto != nil {
		return
	}
	file_api_v1beta1_event_proto_init()
	file_api_v1beta1_topic_proto_init()
	file_api_v1beta1_groups_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1beta1_ensign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1beta1_ensign_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1beta1_ensign_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Publication_Ack)(nil),
		(*Publication_Nack)(nil),
		(*Publication_CloseStream)(nil),
	}
	file_api_v1beta1_ensign_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Subscription_Ack)(nil),
		(*Subscription_Nack)(nil),
		(*Subscription_OpenStream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1beta1_ensign_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1beta1_ensign_proto_goTypes,
		DependencyIndexes: file_api_v1beta1_ensign_proto_depIdxs,
		EnumInfos:         file_api_v1beta1_ensign_proto_enumTypes,
		MessageInfos:      file_api_v1beta1_ensign_proto_msgTypes,
	}.Build()
	File_api_v1beta1_ensign_proto = out.File
	file_api_v1beta1_ensign_proto_rawDesc = nil
	file_api_v1beta1_ensign_proto_goTypes = nil
	file_api_v1beta1_ensign_proto_depIdxs = nil
}
