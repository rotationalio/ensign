/*
Package ulid is a lightweight wrapper around the github.com/oklog/ulid package that
provides some common functionality (like checking if a ULID is null or is zero) as well
as a process-global, cryptographically random, monotonic, and thread-safe ulid
generation mechanism that can be used from external packages.
*/
package ulid

import (
	"crypto/rand"
	"io"
	"time"

	"github.com/oklog/ulid/v2"
)

// The source of entropy used for all ULIDs generated by this package. This variable is
// initialized when the package is first imported.
var entropy io.Reader

func init() {
	entropy = &ulid.LockedMonotonicReader{
		MonotonicReader: ulid.Monotonic(rand.Reader, 0),
	}
}

// Null ULID pre-allocated for easier checking.
var Null = ulid.ULID{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

func IsZero(uid ulid.ULID) bool {
	return uid.Compare(Null) == 0
}

func New() ulid.ULID {
	ms := ulid.Timestamp(time.Now())
	uid, err := ulid.New(ms, entropy)
	if err != nil {
		panic(err)
	}
	return uid
}
