syntax = "proto3";

package ensign.v1beta1;
option go_package = "github.com/rotationalio/ensign/pkg/api/v1beta1;api";

import "google/protobuf/timestamp.proto";

// Event is a high level wrapper for a datagram that is totally ordered by the Ensign
// event-driven framework. Events are simply blobs of data and associated metadata that
// can be published by a producer, inserted into a log, and consumed by a subscriber.
// The mimetype of the event allows subscribers to deserialize the data into a specific
// format such as JSON or protocol buffers. The type acts as a key for heterogeneous
// topics and can also be used to lookup schema information for data validation.
// TODO: do we need to allow for event keys or is the type sufficient?
// TODO: change mimetype to an enum
// TODO: how should we implement the event IDs, should we use a time based mechanism like ksuid?
// TODO: is this too nested? should we flatten some of the inner types?
message Event {
    string id = 1;
    string topic_id = 2;
    string mimetype = 3;
    Type type = 4;

    bytes data = 5;

    Encryption encryption = 6;
    Compression compression = 7;
    Region geography = 8;
    Publisher publisher = 9;

    google.protobuf.Timestamp created = 14;
    google.protobuf.Timestamp committed = 15;
}

// An event type is composed of a name and a version so that the type can be looked up
// in the schema registry. The schema can then be used to validate the data inside the
// event. Schemas are optional but types are not unless the mimetype requries a schema
// for deserialization (e.g. protobuf, parquet, avro, etc.).
message Type {
    string name = 1;
    uint32 version = 2;
}

// Metadata about the cryptography used to secure the event.
// TODO: should we encrypt each event individually or blocks of events together?
// TODO: this is only partially implemented
message Encryption {
    string algorithm = 1;
    string key_id = 2;
}

// Metadata about compression used to reduce the storage size of the event.
// TODO: should we compress each event individually or blocks of events together?
// TODO: this is only partially implemented
message Compression {
    string algorithm = 2;
}

// Geographic metadata for compliance and region-awareness.
// TODO: this is only partially implemented
message Region {
    string name = 1;
}

// Information about the publisher of the event for provenance and auditing purposes.
// TODO: this is only partially implemented
message Publisher {
    string client_id = 1;
    string ipaddr = 2;
}