syntax = "proto3";

package ensign.v1beta1;
option go_package = "github.com/rotationalio/ensign/pkg/api/v1beta1;api";

import "ensign/v1beta1/event.proto";
import "google/protobuf/timestamp.proto";

// Topics are collections of related events and the events inside of a topic are totally
// ordered by ID and their log index. Topics must define the event types and regions
// that they are operated on, which will allow Ensign to determine how to distribute the
// topic over multiple nodes. Users must use the topic ID to connect to a publish or
// subscribe stream. Users can create and delete topics, but for the current
// implementation, topics are immutable -- meaning that they cannot be changed. Topics
// can be deleted in two ways: they can be archived (making them readonly) or they can
// be destroyed, which removes the name of the topic and all the events in the topic.
message Topic {
    string id = 1;
    string name = 2;
    repeated Type types = 3;
    repeated Region regions = 4;

    bool readonly = 14;
    google.protobuf.Timestamp created = 15;
}

// A list of paginated topics the user can use to identify topic ids to subscribe to.
message TopicsPage {
    repeated Topic topics = 1;
    string next_page_token = 2;
}

// A topic modification operation to archive or destroy the topic.
message TopicMod {
    enum Operation {
        NOOP = 0;
        ARCHIVE = 1; // makes the topic readonly
        DESTROY = 2; // deletes the topic and removes all of its data
    }

    string id = 1;
    Operation operation = 2;
}

// A temporary representation of the topic state, e.g. was it modified to be readonly
// or is it in the process of being deleted. Once deleted the topic is permenantly gone.
message TopicTombstone {
    enum Status {
        UNKNOWN = 0;
        READONLY = 1;
        DELETING = 2;
    }

    string id = 1;
    Status state = 2;
}