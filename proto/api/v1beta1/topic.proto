syntax = "proto3";

package ensign.v1beta1;

import "api/v1beta1/event.proto";
import "region/v1beta1/region.proto";
import "google/protobuf/timestamp.proto";
import "mimetype/v1beta1/mimetype.proto";

// Topics are collections of related events and the events inside of a topic are totally
// ordered by ID and their log index. Topics must define the event types and regions
// that they are operated on, which will allow Ensign to determine how to distribute the
// topic over multiple nodes. Users must use the topic ID to connect to a publish or
// subscribe stream. Users can create and delete topics, but for the current
// implementation, topics are immutable -- meaning that they cannot be changed. Topics
// can be deleted in two ways: they can be archived (making them readonly) or they can
// be destroyed, which removes the name of the topic and all the events in the topic.
message Topic {
    bytes id = 1;
    bytes project_id = 2;
    string name = 3;
    bool readonly = 4;
    uint64 offset = 5;
    uint32 shards = 6;

    repeated Placement placements = 12;
    repeated Type types = 13;
    google.protobuf.Timestamp created = 14;
    google.protobuf.Timestamp modified = 15;
}

message TopicName {
    string topic_id = 1;
    string project_id = 2;
    string name = 3;
}

message TopicInfo {
    bytes topic_id = 1;
    bytes project_id = 2;

    // The event offset id specifies the last event that was used to make the TopicInfo
    // determination (e.g. up to which event was the topic info recorded for). To reset
    // the topic info, simply set this to nil/empty and the topic info is recomputed.
    bytes event_offset_id = 3;

    uint64 events = 7;
    uint64 duplicates = 8;
    uint64 data_size_bytes = 9;

    repeated EventTypeInfo types = 14;
    google.protobuf.Timestamp modified = 15;
}

// A list of paginated topics the user can use to identify topic ids to subscribe to.
message TopicsPage {
    repeated Topic topics = 1;
    string next_page_token = 2;
}

// A list of paginated topic names to topic IDs to allow users to match names to IDs.
message TopicNamesPage {
    repeated TopicName topic_names = 1;
    string next_page_token = 2;
}

// A topic modification operation to archive or destroy the topic.
message TopicMod {
    enum Operation {
        NOOP = 0;
        ARCHIVE = 1; // makes the topic readonly
        DESTROY = 2; // deletes the topic and removes all of its data
    }

    string id = 1;
    Operation operation = 2;
}

// A temporary representation of the topic state, e.g. was it modified to be readonly
// or is it in the process of being deleted. Once deleted the topic is permenantly gone.
message TopicTombstone {
    enum Status {
        UNKNOWN = 0;
        READONLY = 1;
        DELETING = 2;
    }

    string id = 1;
    Status state = 2;
}

// Response to a topic existence check.
message TopicExistsInfo {
    string query = 1;
    bool exists = 2;
}

// Placement represents the nodes and regions a topic is assigned to for routing.
message Placement {
    uint64 epoch = 1;
    ShardingStrategy sharding = 2;
    repeated region.v1beta1.Region regions = 3;
    repeated Node nodes = 4;
}

enum ShardingStrategy {
    UNKNOWN = 0;
    NO_SHARDING = 1;
    CONSISTENT_KEY_HASH = 2;
    RANDOM = 3;
    PUBLISHER_ORDERING = 4;
}

message Node {
    string id = 1;
    string hostname = 2;
    uint64 quorum = 3;
    uint64 shard = 4;
    region.v1beta1.Region region = 5;
    string url = 6;
}

message EventTypeInfo {
    Type type = 1;
    mimetype.v1beta1.MIME mimetype = 2;

    uint64 events = 10;
    uint64 duplicates = 11;
    uint64 data_size_bytes = 12;

    google.protobuf.Timestamp modified = 15;
}