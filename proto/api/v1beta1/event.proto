syntax = "proto3";

package ensign.v1beta1;

import "region/v1beta1/region.proto";
import "mimetype/v1beta1/mimetype.proto";
import "google/protobuf/timestamp.proto";

// EventWrapper is a header wrapper for processing events by the Ensign server. It is
// intended to reduce the processing time of events to increase throughput on the server
// even though it will require more work from the SDKs to serialize events. However,
// this will happen on the client-side making Ensign nodes much more parallel. The only
// data in the EventWrapper should be data that is required for the Ensign node to
// process events.
message EventWrapper {
    // The event ID is an RLID that represents an ordered series of concurrent events.
    bytes id = 1;

    // The topic ID the event should be published to.
    bytes topic_id = 2;

    // Offset and epoch are related to guarantee total ordering through consensus.
    uint64 offset = 3;
    uint64 epoch = 4;

    // Publisher and geography information about the provenance of the event.
    region.v1beta1.Region region = 5;
    Publisher publisher = 6;

    // Keys allow the event to be sharded across topics and must be part of the wrapper.
    // The shard specifies which shard the key was assigned to by the sharding strategy.
    bytes key = 7;
    uint64 shard = 8;

    // The event data should be a proto marshaled Event that is serialized at the client.
    bytes event = 9;

    // Events can be encrypted and compressed individually but more often are encrypted
    // and compressed in event containers. This allows parity with containers but also
    // enables end-to-end encryption of specific events.
    Encryption encryption = 10;
    Compression compression = 11;

    // Deduplication pointer; if this event wrapper is a duplicate then it should be
    // omitted from standard queries depending on the deduplication strategy of the
    // topic. The DuplicateID points to the event that contains the data referred to by
    // this duplicated event wrapper. A duplicate event wrapper will likely have all of
    // the metadata but no event data.
    bool is_duplicate = 12;
    bytes duplicate_id = 13;

    // The timestamp that the event was committed by the consensus protocol.
    google.protobuf.Timestamp committed = 15;

    // LocalID is an ID that must be unique to the publisher and is used to send acks
    // back to the publisher. This field should be solely managed by the SDK publisher.
    // The field is discarded before saving to disk and is not available to subscribers
    // or any time after the publish ack/nack has been sent back to the publisher.
    bytes local_id = 16;
}

// Event is a high level wrapper for a datagram that is totally ordered by the Ensign
// event-driven framework. Events are simply blobs of data and associated metadata that
// can be published by a producer, inserted into a log, and consumed by a subscriber.
// The mimetype of the event allows subscribers to deserialize the data into a specific
// format such as JSON or protocol buffers. The type acts as a key for heterogeneous
// topics and can also be used to lookup schema information for data validation.
message Event {
    // The datagram for the event.
    bytes data = 2;

    // User-defined key-value pairs that can be optionally added to the event.
    map<string,string> metadata = 3;

    // The mimetype describes how to parse the event datagram.
    mimetype.v1beta1.MIME mimetype = 4;

    // Type defines the schema of he event datagram.
    Type type = 5;

    // Timestamp that the event was created according to the client's clock.
    google.protobuf.Timestamp created = 15;
}

// EventContainer is used to store events in blocks on disk. It is intended as a more
// generic version of the event wrapper but for multiple events. EventContainers require
// all events in the container to belong to the same topic and have a contiguous range
// of event IDs and offsets. EventContainers reduce the amount of data needed to store
// multiple events by reducing the amount of duplicated data. For example the topic ID,
// offset, and epoch are removed from the inner event and stored on the container. Even
// though zeros are still stored for offset and epoch it results in a 4.3x compression.
// Similar techniques are used for other metadata in the container.
message EventContainer {
    // All events in a container must belong to the same topic.
    bytes topic_id = 1;

    // The offsets of the events in the container.
    uint64 start_offset = 2;
    uint64 end_offset = 3;

    // Mapping of an index to the epoch; it is assumed that all offsets following the
    // mapping share the epoch until the next epoch is specified.
    map<uint32,uint64> epochs = 4;

    // The event data, possibly encrypted and compressed. The raw data is an array of
    // serialized event-wrappers with duplicated data removed from the wrapper and moved
    // to the top-level of the container.
    bytes events = 5;

    // Encryption and compression information for deserializing event data.
    Encryption encryption = 6;
    Compression compression = 7;

    // De-duplication of event metadata by storing only the unique values and mapping
    // the index of each event to the specified metadata as an index in its array.
    repeated region.v1beta1.Region regions = 8;
    map<uint32, uint32> region_index = 9;

    repeated Publisher publishers = 10;
    map<uint32, uint32> publisher_index = 11;

    repeated bytes keys = 12;
    map<uint32,uint32> key_index = 13;

    repeated uint64 shards = 14;
    map<uint32,uint32> shard_index = 15;

    // Access timestamps for the container
    google.protobuf.Timestamp created = 31;
    google.protobuf.Timestamp modified = 32;
}

// An event type is composed of a name and a version so that the type can be looked up
// in the schema registry. The schema can then be used to validate the data inside the
// event. Schemas are optional but types are not unless the mimetype requries a schema
// for deserialization (e.g. protobuf, parquet, avro, etc.).
message Type {
    string name = 1;
    uint32 major_version = 2;
    uint32 minor_version = 3;
    uint32 patch_version = 4;
}

// Metadata about the cryptography used to secure the event.
message Encryption {
    enum Algorithm {
        // No cryptography is being used
        PLAINTEXT = 0;

        // Encryption Algorithms
        AES256_GCM = 110;
        AES192_GCM = 120;
        AES128_GCM = 130;

        // Signature Algorithms
        HMAC_SHA256 = 310;

        // Sealing Algorithms (Asymmetric)
        RSA_OAEP_SHA512 = 510;
    }

    string public_key_id = 1;
    bytes encryption_key = 2;
    bytes hmac_secret = 3;
    bytes signature = 4;
    Algorithm sealing_algorithm = 5;
    Algorithm encryption_algorithm = 6;
    Algorithm signature_algorithm = 7;
}

// Metadata about compression used to reduce the storage size of the event.
message Compression {
    enum Algorithm {
        NONE = 0;
        GZIP = 1;
        COMPRESS = 2;
        DEFLATE = 3;
        BROTLI = 4;
    }

    Algorithm algorithm = 1;
    int64 level = 2;
}

// Information about the publisher of the event for provenance and auditing purposes.
// TODO: this is only partially implemented
message Publisher {
    string publisher_id = 1;
    string ipaddr = 2;
    string client_id = 3;
    string user_agent = 4;
}