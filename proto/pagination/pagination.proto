syntax = "proto3";

package pagination;
option go_package = "github.com/rotationalio/ensign/pkg/utils/pagination";

import "google/protobuf/timestamp.proto";

// Key-Index Cursors are useful for high-performance pagination that do not require
// Postgres Cursors managed by an open transaction. The cursor specifies the current
// page of results so that the next/previous pages can be calculated from the query.
// Cursors also specify an expiration so that a page token cannot be replayed forever.
// Note that Key-Index cursors require the original query to correctly order the index,
// this cursor type assumes that no ordering or filtering has been applied.
//
// The cursor object is serialized and base64 encoded to be sent as a next_page_token
// in a paginated request. Protocol buffers ensures the most compact representation.
message Cursor {
    // The start index is the ID at the beginning of the page and is used for previous
    // page queries, whereas the end index is the last ID on the page and is used to
    // compute the next page for the query. Ensure that IDs are montonically increasing
    // such as autoincrement IDs or ULIDs (do not use UUIDs).
    string start_index = 1;
    string end_index = 2;

    // The maximum number of results per page.
    int32 page_size = 3;

    // The timestamp when the cursor is no longer valid.
    google.protobuf.Timestamp expires = 4;
}