<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ensign Documentation on Ensign Docs</title><link>https://ensign.rotational.dev/</link><description>Recent content in Ensign Documentation on Ensign Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ensign.rotational.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration</title><link>https://ensign.rotational.dev/system/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/system/configuration/</guid><description>&lt;p>&lt;em>Note: This page is for internal Ensign development and will probably not be very useful to Ensign users.&lt;/em>&lt;/p>
&lt;h1 id="configuration">
Configuration
&lt;a class="anchor" href="#configuration">#&lt;/a>
&lt;/h1>
&lt;p>Ensign services are primarily configured using environment variables and will respect &lt;a href="https://github.com/joho/godotenv">dotenv files&lt;/a> in the current working directory. The canonical reference of the configuration for an Ensign service is the &lt;code>config&lt;/code> package of that service (described below). This documentation enumerates the most important configuration variables, their default values, and any hints or warnings about how to use them.&lt;/p>
&lt;blockquote class="book-hint info">
&lt;strong>Required Configuration&lt;/strong>&lt;br />
If a configuration parameter does not have a default value that means it is required and must be specified by the user! If the configuration parameter does have a default value then that environment variable does not have to be set.
&lt;/blockquote></description></item><item><title>Glossary</title><link>https://ensign.rotational.dev/eventing/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/eventing/glossary/</guid><description>Here&amp;rsquo;s a handy list of terms to help get you started:
api key # &amp;ldquo;API&amp;rdquo; stands for &amp;ldquo;Application Programming Interface&amp;rdquo;, which is a very broad term that refers (super high level) to the ways in which users or other applications can interact with an application.
Some applications (like Ensign) require permission to interact with, such as a password, token, or key.
You can get a free Ensign API key by visiting rotational.</description></item><item><title>Ensign for Application Developers</title><link>https://ensign.rotational.dev/examples/developers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/examples/developers/</guid><description>Ensign for Application Developers # Hi there! This tutorial is targeted towards Golang application developers. If you are interested in or currently writing event-driven applications in Go you are in the right place! In this code-driven tutorial we will use the Ensign Golang SDK to publish curated tweets to an event stream and retrieve them in real time.
If you came here for the code the full example is available here.</description></item><item><title>FAQ</title><link>https://ensign.rotational.dev/eventing/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/eventing/faq/</guid><description>What is an event (or data) stream? # You can think of an event stream as a pipeline through which data flows, much like pipes that move water in your home. You can use an event stream to connect data sources that produce or emit data (events) to data sinks that consume or process the data. A data source or producer that emits data can be a database, a data warehouse, a data lake, machines, edge devices or sensors, microservices, or applications.</description></item><item><title>Ensign for Data Engineers</title><link>https://ensign.rotational.dev/examples/data_engineers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/examples/data_engineers/</guid><description>Ensign for Data Engineers # We love data engineers â€” it&amp;rsquo;s how a lot of us got our starts in tech. One of the main reasons we made Ensign is to make it easier for you to put your data in motion. We know that a clumsy ETL routine can quickly turn a data lake into a data landfill.
In this example we&amp;rsquo;ll see how to move data around with Ensign.</description></item><item><title>Ensign for Data Scientists</title><link>https://ensign.rotational.dev/examples/data_scientists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/examples/data_scientists/</guid><description>Ensign for Data Scientists # Here&amp;rsquo;s a question we frequently get from our data scientist friends:
What does event-driven data science even look like??
In this tutorial we&amp;rsquo;ll find out! Join along in implementing an event-driven Natural Language Processing tool that does streaming HTML parsing, entity extraction, and sentiment analysis.
Just here for the code? Check it out here!
Prerequisites # To follow along with this tutorial you&amp;rsquo;ll need to:</description></item><item><title>Consumer Groups</title><link>https://ensign.rotational.dev/sdk/groups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/sdk/groups/</guid><description>&lt;h1 id="consumer-groups">
Consumer Groups
&lt;a class="anchor" href="#consumer-groups">#&lt;/a>
&lt;/h1>
&lt;p>Consumer groups allow multiple subscribers in different processes to coordinate how they consume events from a topic.&lt;/p></description></item><item><title>Staging</title><link>https://ensign.rotational.dev/system/staging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ensign.rotational.dev/system/staging/</guid><description>Note: This page is for internal Ensign development and will probably not be very useful to Ensign users. The staging environment has the latest code deployed frequently, may introduce breaking changes, and has it&amp;rsquo;s data routinely deleted.
Staging Environment # Ensign developers can access the staging environment in order to perform testing and development or to QA release candidates before they are deployed.
To get started, make sure that you&amp;rsquo;ve created an API Key in the staging environment using the Beacon UI at https://ensign.</description></item></channel></rss>