<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ensign Internals on Ensign Documentation</title><link>https://ensign.rotational.dev/system/</link><description>Recent content in Ensign Internals on Ensign Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 May 2023 17:03:41 -0400</lastBuildDate><atom:link href="https://ensign.rotational.dev/system/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Brokering</title><link>https://ensign.rotational.dev/system/broker/</link><pubDate>Wed, 17 May 2023 17:03:41 -0400</pubDate><guid>https://ensign.rotational.dev/system/broker/</guid><description>At the core of Ensign is the Broker.
Event brokers are what differentiate eventing systems (e.g. Kafka, Pulsar, Redpanda, Google PubSub, Ensign) from synchronous messaging systems (e.g. RabbitMQ, Ably, Amazon SQS).
What Does a Broker Do? Brokers are responsible for a lot.
Here are some of the main responsibilities of an Ensign broker:
Persisting Data The Ensign Broker persists data written to any topic by the Publisher so that multiple Subscribers can read data from that same topic.</description></item><item><title>Consumer Groups</title><link>https://ensign.rotational.dev/system/groups/</link><pubDate>Wed, 17 May 2023 17:03:41 -0400</pubDate><guid>https://ensign.rotational.dev/system/groups/</guid><description>&lt;p>Consumer groups allow multiple subscribers in different processes to coordinate how they consume events from a topic.&lt;/p></description></item><item><title>Configuration</title><link>https://ensign.rotational.dev/system/configuration/</link><pubDate>Wed, 17 May 2023 17:03:41 -0400</pubDate><guid>https://ensign.rotational.dev/system/configuration/</guid><description>&lt;p>&lt;em>Note: This page is for internal Ensign development and will probably not be very useful to Ensign users.&lt;/em>&lt;/p>
&lt;p>Ensign services are primarily configured using environment variables and will respect &lt;a href="https://github.com/joho/godotenv"
target="_blank"
>dotenv files&lt;/a>
in the current working directory. The canonical reference of the configuration for an Ensign service is the &lt;code>config&lt;/code> package of that service (described below). This documentation enumerates the most important configuration variables, their default values, and any hints or warnings about how to use them.&lt;/p>
&lt;p>&lt;strong>Required Configuration&lt;/strong>&lt;br />
If a configuration parameter does not have a default value that means it is required and must be specified by the user! If the configuration parameter does have a default value then that environment variable does not have to be set.&lt;/p></description></item><item><title>Staging</title><link>https://ensign.rotational.dev/system/staging/</link><pubDate>Wed, 17 May 2023 17:03:41 -0400</pubDate><guid>https://ensign.rotational.dev/system/staging/</guid><description>Note: This page is for internal Ensign development and will probably not be very useful to Ensign users. The staging environment has the latest code deployed frequently, may introduce breaking changes, and has it&amp;rsquo;s data routinely deleted.
Staging Environment Field Value Alias Beacon UI https://ensign.world Endpoint &amp;quot;staging.ensign.world:443&amp;quot; &amp;quot;ensign.ninja:443&amp;quot; AuthURL &amp;quot;https://auth.ensign.world&amp;quot; Ensign developers can access the staging environment in order to perform testing and development or to QA release candidates before they are deployed.</description></item></channel></rss>